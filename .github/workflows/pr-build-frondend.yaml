name: PR Build and Deploy
on:
  push:
    branches: [main, "fix/*", "feat/*"]
    paths: 
      - 'frontend/**'
      - 'product-service/**'
      - 'user-service/**'
  pull_request:
    branches: [main, "fix/*", "feat/*"]
    paths:
      - 'frontend/**'
      - 'product-service/**'
      - 'user-service/**'
  workflow_dispatch:

env:
  NODE_VERSION: 20

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üêô Checkout code
        uses: actions/checkout@v4

      - name: üî• Setup NodeJS
        if: true
        uses: actions/setup-node@v4
        with:
          registry-url: "https://npm.pkg.github.com"
          always-auth: true
          node-version: ${{ env.NODE_VERSION }}

      - name: üèóÔ∏è Build Frontend
        if: true
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: üèóÔ∏è Build Product-Service
        if: true
        working-directory: ./product-service
        run: |
          npm install
          npm run build

      - name: üèóÔ∏è Build User-Service
        if: true
        working-directory: ./user-service
        run: |
          npm install
          npm run build

      - name: üöÄ Deploy Frontend to S3
        if: true
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          SOURCE_DIR: './frontend/build'
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîß Setup Docker Buildx
        if: true
        uses: docker/setup-buildx-action@v2

      - name: üîë Login to ECR
        if: true
        uses: aws-actions/amazon-ecr-login@v1

      - name: üì¶ Build and Push Product-Service Image
        if: true
        working-directory: ./product-service
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ECR_REPO_URL }}/my-prod:1.5 --push .

      - name: üì¶ Build and Push User-Service Image
        if: true
        working-directory: ./user-service
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ECR_REPO_URL }}/my-user:1.5 --push .

      - name: üê≥ SSH and Update Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            pwd
            ls
            git clone https://github.com/rohanbas95/cdactest2.git
            ls
            cd cdactest2
            git status
            git pull
            pwd
            ls
            docker-compose pull || exit 1
            docker-compose up -d || exit 1
            sleep 10

            # Test REST API endpoints
            echo "Testing GET endpoint"
            curl -f http://localhost:3001/api/users || exit 1

            echo "Testing POST endpoint"
            RESPONSE=$(curl -s -f -X POST http://localhost:3001/api/users \
              -d '{"name":"testpro","email":"test@example.com"}' \
              -H "Content-Type: application/json") || exit 1

            echo "POST Response: $RESPONSE"
            USER_ID=$(echo $RESPONSE | jq -r '._id')

            echo "Testing PUT endpoint"
            curl -f -X PUT http://localhost:3001/api/users/$USER_ID \
              -d '{"name":"test updated"}' \
              -H "Content-Type: application/json" || exit 1

            echo "Testing DELETE endpoint"
            curl -f -X DELETE http://localhost:3001/api/users/$USER_ID || exit 1